# Generated by Django 5.0 on 2025-09-07 15:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patient', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('show_as_record_column', models.BooleanField(default=False, help_text='Show this category as a separate column in daily reports')),
                ('category_type', models.CharField(choices=[('service', 'Service/Procedure'), ('item', 'Item/Product'), ('mixed', 'Both Services and Items')], default='mixed', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Service Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Default price (can be overridden during transaction)', max_digits=10)),
                ('has_results', models.BooleanField(default=False, help_text='Does this service produce results that need to be recorded?')),
                ('result_template', models.JSONField(blank=True, help_text='Template for recording results in JSON format', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='service.servicecategory')),
            ],
            options={
                'ordering': ['category__name', 'name'],
                'unique_together': {('category', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ServiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('model_number', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Purchase/cost price for profit calculation', max_digits=10, null=True)),
                ('stock_quantity', models.IntegerField(default=0)),
                ('minimum_stock_level', models.IntegerField(default=5)),
                ('unit_of_measure', models.CharField(choices=[('piece', 'Piece'), ('pair', 'Pair'), ('box', 'Box'), ('bottle', 'Bottle'), ('pack', 'Pack'), ('meter', 'Meter'), ('liter', 'Liter'), ('kg', 'Kilogram')], default='piece', max_length=20)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('is_prescription_required', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_items', to='service.servicecategory')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['category__name', 'name'],
                'unique_together': {('category', 'name', 'model_number')},
            },
        ),
        migrations.CreateModel(
            name='PatientModelServiceTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of transaction', max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=0, help_text='Total discount applied', max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Final amount after discount', max_digits=10)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('partial', 'Partially Paid'), ('waived', 'Waived'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('consultation_id', models.PositiveIntegerField(blank=True, help_text='Link to consultation if applicable', null=True)),
                ('admission_id', models.PositiveIntegerField(blank=True, help_text='Link to admission if applicable', null=True)),
                ('surgery_id', models.PositiveIntegerField(blank=True, help_text='Link to surgery if applicable', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('service_date', models.DateTimeField(blank=True, help_text='When the service was actually performed (if different from recorded)', null=True)),
                ('patientModel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient.patientmodel')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_services', to=settings.AUTH_USER_MODEL)),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_services', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='service.service')),
                ('service_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='service.serviceitem')),
            ],
            options={
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='ServiceItemStockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('stock_in', 'Stock In'), ('stock_out', 'Stock Out'), ('adjustment', 'Stock Adjustment'), ('transfer', 'Transfer'), ('expired', 'Expired/Damaged'), ('sale', 'Sale to PatientModel'), ('return', 'Return from PatientModel')], max_length=20)),
                ('quantity', models.IntegerField(help_text='Positive for in, negative for out')),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per unit for stock-in transactions', max_digits=10, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost for this movement', max_digits=10, null=True)),
                ('previous_stock', models.IntegerField(help_text='Stock level before this movement')),
                ('new_stock', models.IntegerField(help_text='Stock level after this movement')),
                ('reference_type', models.CharField(blank=True, choices=[('purchase', 'Purchase Order'), ('sale', 'PatientModel Sale'), ('transfer', 'Stock Transfer'), ('adjustment', 'Stock Adjustment'), ('expiry', 'Expiry/Damage'), ('return', 'Return')], max_length=20, null=True)),
                ('reference_id', models.PositiveIntegerField(blank=True, help_text='ID of related transaction/document', null=True)),
                ('batch_number', models.CharField(blank=True, max_length=100, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('service_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='service.serviceitem')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_data', models.JSONField(help_text='The actual result data in JSON format')),
                ('result_file', models.FileField(blank=True, help_text='For file attachments (X-rays, reports, etc.)', null=True, upload_to='service_results/')),
                ('is_abnormal', models.BooleanField(default=False)),
                ('interpretation', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_created_by', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='service.patientmodelservicetransaction')),
            ],
        ),
    ]
